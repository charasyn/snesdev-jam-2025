#!/usr/bin/env python
'''
Convert a tile PNG and palette PNG to binary data to put in the game.

'''

import argparse

from PIL import Image

from ConversionLib.Snes import imgToSnesColourDepth, SnesPalette, SnesTile
from ConversionLib.image_cropper import get_tiles

def writeAsmFile(path: str, tileBinPath: str, palettePath: str):
    symname=path.rsplit('/')[-1].replace('.asm','')
    lines=[
        '; Autogenerated by tileimg_to_bin',
        '.segment "BANK02"',
        f'{symname}_tiles: .incbin "{symname}.tiles.bin"',
        f'{symname}_palette: .incbin "{symname}.pal"',
        '; End of generated content'
    ]
    with open(path, 'w') as f:
        f.write('\n'.join(lines))

def output(path: str, tileData: bytes, paletteData: bytes):
    tileBinPath = path.replace('.asm', '.tiles.bin')
    palettePath = path.replace('.asm', '.pal')
    with open(tileBinPath, 'wb') as f:
        f.write(tileData)
    with open(palettePath, 'wb') as f:
        f.write(paletteData)
    writeAsmFile(path, tileBinPath, palettePath)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('inputTileFile', metavar='<input.png>', type=str, help="Input PNG file containing tiles to convert")
    parser.add_argument('inputPaletteFile', metavar='<input_palette.png>', type=str, help="Input PNG file containing the palette to use with the tile PNG")
    parser.add_argument('outputFile', metavar='<output.asm>', type=str, help="Path to output .asm file")
    parser.add_argument('--bpp', type=int, help="Graphics colour depth (2, 4, or 8)")
    args = parser.parse_args()
    with ( Image.open(args.inputTileFile) as tileImg,
           Image.open(args.inputPaletteFile) as paletteImg ):
        tileImg = imgToSnesColourDepth(tileImg)
        paletteImg = imgToSnesColourDepth(paletteImg)
    palette = SnesPalette.from_image(paletteImg, bpp=args.bpp)
    tileImgs = get_tiles(tileImg, 8)
    tileData = []
    for idx, tileImg in enumerate(tileImgs):
        tile = SnesTile.from_image(tileImg, palette, index=idx)
        tileData.append(tile.to_bytes())
    tileData = b''.join(tileData)
    paletteData = palette.to_bytes()
    output(args.outputFile, tileData, paletteData)

if __name__ == '__main__':
    main()
